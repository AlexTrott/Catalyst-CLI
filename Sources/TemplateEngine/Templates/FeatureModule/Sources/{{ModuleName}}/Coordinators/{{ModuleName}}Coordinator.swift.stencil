//
//  {{ModuleName}}Coordinator.swift
//  {{ModuleName}}
//
//  Created by {{Author|default:"Catalyst CLI"}} on {{Date|date:"MM/dd/yyyy"}}.
//  Copyright Â© {{Year}} {% if OrganizationName %}{{OrganizationName}}{% else %}All rights reserved{% endif %}.
//

import UIKit

/// Protocol defining {{ModuleName}} coordination capabilities
public protocol {{ModuleName}}CoordinatorProtocol: AnyObject {
    func start()
    func showDetail(for item: {{ModuleName}}Item)
    func showSettings()
    func dismiss()
}

/// Coordinator for managing {{ModuleName}} navigation flow
public class {{ModuleName}}Coordinator: {{ModuleName}}CoordinatorProtocol {

    // MARK: - Properties

    private weak var navigationController: UINavigationController?
    private var childCoordinators: [Any] = []

    // MARK: - Initialization

    public init(navigationController: UINavigationController) {
        self.navigationController = navigationController
    }

    // MARK: - {{ModuleName}}CoordinatorProtocol

    /// Start the {{ModuleName}} flow
    public func start() {
        let viewController = {{ModuleName}}.createViewController(coordinator: self)
        navigationController?.pushViewController(viewController, animated: true)
    }

    /// Show detail view for a specific item
    ///
    /// - Parameter item: The item to show details for
    public func showDetail(for item: {{ModuleName}}Item) {
        let detailViewController = {{ModuleName}}DetailViewController(item: item, coordinator: self)
        navigationController?.pushViewController(detailViewController, animated: true)
    }

    /// Show settings screen
    public func showSettings() {
        let settingsViewController = {{ModuleName}}SettingsViewController(coordinator: self)
        let navigationController = UINavigationController(rootViewController: settingsViewController)

        self.navigationController?.present(navigationController, animated: true)
    }

    /// Dismiss the current screen
    public func dismiss() {
        if navigationController?.presentedViewController != nil {
            navigationController?.dismiss(animated: true)
        } else {
            navigationController?.popViewController(animated: true)
        }
    }

    // MARK: - Private Methods

    private func addChildCoordinator<T>(_ coordinator: T) {
        childCoordinators.append(coordinator)
    }

    private func removeChildCoordinator<T>(_ coordinator: T) {
        childCoordinators.removeAll { $0 as AnyObject === coordinator as AnyObject }
    }
}

// MARK: - Supporting View Controllers

/// UIKit view controller for {{ModuleName}}
public class {{ModuleName}}ViewController: UIViewController {

    weak var coordinator: {{ModuleName}}CoordinatorProtocol?
    private let viewModel: {{ModuleName}}ViewModel

    public init(viewModel: {{ModuleName}}ViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    public override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupBindings()
    }

    private func setupUI() {
        title = "{{ModuleName|snakeCase|replace:'_':' '|capitalize}}"
        view.backgroundColor = .systemBackground

        // Add settings button
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            image: UIImage(systemName: "gearshape"),
            style: .plain,
            target: self,
            action: #selector(settingsButtonTapped)
        )

        // TODO: Set up your UI here
        let label = UILabel()
        label.text = "{{ModuleName}} Feature"
        label.textAlignment = .center
        label.font = .preferredFont(forTextStyle: .title1)
        label.translatesAutoresizingMaskIntoConstraints = false

        view.addSubview(label)

        NSLayoutConstraint.activate([
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            label.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }

    private func setupBindings() {
        // TODO: Set up view model bindings
    }

    @objc private func settingsButtonTapped() {
        coordinator?.showSettings()
    }
}

/// Detail view controller for {{ModuleName}} items
public class {{ModuleName}}DetailViewController: UIViewController {

    weak var coordinator: {{ModuleName}}CoordinatorProtocol?
    private let item: {{ModuleName}}Item

    public init(item: {{ModuleName}}Item, coordinator: {{ModuleName}}CoordinatorProtocol?) {
        self.item = item
        self.coordinator = coordinator
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    public override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }

    private func setupUI() {
        title = item.title
        view.backgroundColor = .systemBackground

        // TODO: Set up detail UI
        let label = UILabel()
        label.text = "Detail for: \(item.title)"
        label.textAlignment = .center
        label.font = .preferredFont(forTextStyle: .headline)
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false

        view.addSubview(label)

        NSLayoutConstraint.activate([
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            label.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            label.leadingAnchor.constraint(greaterThanOrEqualTo: view.leadingAnchor, constant: 20),
            label.trailingAnchor.constraint(lessThanOrEqualTo: view.trailingAnchor, constant: -20)
        ])
    }
}

/// Settings view controller for {{ModuleName}}
public class {{ModuleName}}SettingsViewController: UIViewController {

    weak var coordinator: {{ModuleName}}CoordinatorProtocol?

    public init(coordinator: {{ModuleName}}CoordinatorProtocol?) {
        self.coordinator = coordinator
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    public override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }

    private func setupUI() {
        title = "Settings"
        view.backgroundColor = .systemBackground

        navigationItem.leftBarButtonItem = UIBarButtonItem(
            barButtonSystemItem: .cancel,
            target: self,
            action: #selector(cancelButtonTapped)
        )

        // TODO: Set up settings UI
        let label = UILabel()
        label.text = "{{ModuleName}} Settings"
        label.textAlignment = .center
        label.font = .preferredFont(forTextStyle: .headline)
        label.translatesAutoresizingMaskIntoConstraints = false

        view.addSubview(label)

        NSLayoutConstraint.activate([
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            label.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }

    @objc private func cancelButtonTapped() {
        coordinator?.dismiss()
    }
}